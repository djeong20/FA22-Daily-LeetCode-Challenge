class Solution {
public:
    int fib(int n, unordered_map<int, int>& d) {
        if (n == 1 || n == 2 || n == 3) return n;
        if (d.find(n-1) == d.end()) d[n-1] = fib(n-1, d); 
        if (d.find(n-2) == d.end()) d[n-2] = fib(n-2, d); 
        return d[n-1] + d[n-2];
    }
    
    int climbStairs(int n) {
        unordered_map<int, int> d;
        return fib(n, d);
    }
    
    // n = 1: (1) => 1
    // n = 2: (1,1) (2) => 2
    // n = 3: (1,1,1) (1,2) (2,1) => 3
    // n = 4: (1,1,1,1) (1,2,1) (2,1,1) (1,1,2) (2,2) =>5
    // n = 5: (1,1,1,1,1), (2,1,1,1), (1,2,1,1), (1,1,2,1) (1,1,1,2) (1,2,2) (2,1,2) (2,2,1) => 8
    // n = 6: (1,1,1,1,1,1), (2,1,1,1,1), (1,2,1,1,1), (1,1,2,1,1), (1,1,1,2,1), (1,1,1,1,2) (2,2,1,1), (2,1,2,1), (2,1,1,2) (1,2,2,1) (1,2,1,2) (1,1,2,2) (2,2,2)  => 13
};